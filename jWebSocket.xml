<?xml version="1.0" encoding="UTF-8"?>
<!--
	Document   : jWebSocket.xml
	Created on : March 18, 2010, 10:24 AM
	Author     : aschulze, puran
	Description: Configuration of the jWebSocket Server.
	This includes engines, servers, plug-ins, filter, rights, roles and users
	as well as logging.
-->

<!-- jWebSocket server configuration -->
<jWebSocket>
	<!--
		installation can be prod or dev.
		  'prod'- installation means all the classes will be loaded
		   from the jars defined in this configuration file
		  'dev' - installation means running directly from the source,
		   all the jar files given are ignored.
		   Default value if not specified would be 'prod'
	-->
    <installation>prod</installation>

	<!--
		define the protocol, default protocol if not specified is 'json'
		possible values are [json|xml|csv]
	-->
    <protocol>json</protocol>

	<!--
		the unique ID of this instance within a jWebSocket cluster
		can be left empty to run just a single stand-alone server
		Preparation for pending cluster-plug-in
	-->
    <node_id>01</node_id>

	<!-- Auto load required external libraries -->
	<!--
	<libraries>
		<library>
			<id>Third Party Demo</id>
			<url>/etc/myjars/test.jar</url>
			<description>n/a</description>
		</library>
	</libraries>
	-->

	<!-- jWebSocket logging configuration -->
    <logging>
        <log4j>
			<!-- log4j appender, one of the following options [console|singlefile|rollingfile] -->
            <appender>rollingfile</appender>
			<!-- layout, please refer to http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p - %C{1}: %m%n</pattern>
			<!-- log-level, one of the following options: [all|debug|info|warn|error|fatal|off] -->
            <level>debug</level>
			<!-- filename, used only when appender != console -->
            <filename>jWebSocket.log</filename>
			<!-- controls write cache for logging -->
            <buffered>true</buffered>
			<!-- specifies the size of the write cache for logging -->
            <buffersize>65536</buffersize>
        </log4j>
    </logging>

	<!--
		initializer class required only in 'dev' mode so that client application can register custom servers,
		plugins at compile time for debugging capability to test custom plugins and servers without a need for
		jar files
	-->
    <initializerClass>org.jwebsocket.factory.JWebSocketInitializer</initializerClass>

	<!--
		 Engines available for jWebSocket.
		 ONLY THE TOPMOST ENGINE WILL BE INITIALIZED AND RUN.
		 YOU CANNOT RUN MULTIPLE ENGINES AT A TIME.
	-->
	<!-- jWebSocket engine configuration -->
    <engines>
		<!-- TCP Engine Configuration -->
        <engine>
            <name>org.jwebsocket.tcp.TCPEngine</name>
            <id>tcp0</id>
            <jar>jWebSocketTCPEngine-1.0.jar</jar>
            <port>8787</port>
            <domains>
                <domain>http://gra.goomail.pl</domain>
                <domain>http://warlords</domain>
                <domain>http://127.0.0.1</domain>
                <domain>http://jwebsocket</domain>
            </domains>
			<!-- default session timeout 1h, max timeout currently 1 hour -->
            <timeout>0</timeout>
			<!--
				maximum size of the data packet that the engine will read,
				if the frame size is larger than this the connection will be closed.
			-->
            <maxframesize>1048840</maxframesize>
        </engine>

    </engines>

	<!-- server types to be instantiated for jWebSocket -->
    <servers>
        <server>
            <name>org.jwebsocket.server.TokenServer</name>
            <id>ts0</id>
            <jar>jWebSocketTokenServer-1.0.jar</jar>
			<!-- define the thread pool properties. Thread are spawned when Token's spawnThread value is true
			 Queue sizes and maximum pool sizes may be traded off for each other: Using large queues and small pools minimizes CPU usage, OS resources, and context-switching overhead, but can lead to artificially low throughput.
			 If tasks frequently block (for example if they are I/O bound), a system may be able to schedule time for more threads than you otherwise allow.
			 Use of small queues generally requires larger pool sizes, which keeps CPUs busier but may encounter unacceptable scheduling overhead, which also decreases throughput.
			 -->
            <threadPool>
				<!--  number of thread that are "waiting" even if the queue is empty  -->
                <corePoolSize>10</corePoolSize>
				<!--  number maximum of thread that can be running at the same time -->
                <maximumPoolSize>100</maximumPoolSize>
				<!--  time before the desctruction of "free" threads (seconds) -->
                <keepAliveTime>60</keepAliveTime>
				<!--  size of the blocking queue. Connection will be refused if the queue is full and the poolsize is equals to the maximumPoolSize -->
                <blockingQueueSize>1000</blockingQueueSize>
            </threadPool>
        </server>
    </servers>

	<!-- jWebSocket global rights -->
    <rights>
		<!-- configuration of system plug-in specific rights -->
        <right>
            <ns>org.jwebsocket.plugins.system</ns>
            <id>broadcast</id>
            <description>Broadcast message to all other clients.</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.system</ns>
            <id>send</id>
            <description>Send message to a single target client.</description>
        </right>

		<!-- Channel rights -->
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>start</id>
            <description>Allow to start a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>stop</id>
            <description>Allow to stop a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>suspend</id>
            <description>Allow to suspend a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>resume</id>
            <description>Allow to resume a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>subscribe</id>
            <description>Allow to subscribe to and unsubscribe from a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>publish</id>
            <description>Allow to publish to a channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>getChannels</id>
            <description>Allow to retrieve the list of available channels</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>getSubscribers</id>
            <description>Allow to retrieve the list of scubscribers of a certain channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>getSubscriptions</id>
            <description>Allow to retrieve the list of channels the current client subscribed to</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>createChannel</id>
            <description>Allow to create a new channel</description>
        </right>
        <right>
            <ns>org.jwebsocket.plugins.channels</ns>
            <id>removeChannel</id>
            <description>Allow to remove an existing channel</description>
        </right>

    </rights>

	<!-- jWebSocket roles -->
    <roles>
        <role>
            <id>Guest</id>
            <description>Guest users</description>
            <rights>
				<!-- Channel rights -->
                <right>org.jwebsocket.plugins.channels.subscribe</right>
                <right>org.jwebsocket.plugins.channels.publish</right>
                <right>org.jwebsocket.plugins.channels.getChannels</right>
                <right>org.jwebsocket.plugins.channels.getSubscribers</right>
                <right>org.jwebsocket.plugins.channels.getSubscriptions</right>

            </rights>
        </role>
        <role>
            <id>Administrator</id>
            <description>Admin</description>
            <rights>
                <right>org.jwebsocket.plugins.system.broadcast</right>
                <right>org.jwebsocket.plugins.system.send</right>
                <right>org.jwebsocket.plugins.chat.broadcast</right>
                <right>org.jwebsocket.plugins.rpc.rpc</right>

				<!-- Channel rights -->
                <right>org.jwebsocket.plugins.channels.subscribe</right>
                <right>org.jwebsocket.plugins.channels.publish</right>
                <right>org.jwebsocket.plugins.channels.getChannels</right>
                <right>org.jwebsocket.plugins.channels.getSubscribers</right>
                <right>org.jwebsocket.plugins.channels.getSubscriptions</right>
                <right>org.jwebsocket.plugins.channels.createChannel</right>
                <right>org.jwebsocket.plugins.channels.removeChannel</right>

            </rights>
        </role>
    </roles>

	<!-- jWebSocket users -->
    <users>
        <user>
            <uuid>000-000-001-2011-07-14-11-32-40-223</uuid>
            <loginname>root</loginname>
            <firstname>jWebSocket Admin User</firstname>
            <lastname>(Admin Role)</lastname>
			<!-- no password means that the user does not need a password -->
            <password>36e69ae581319d174976f8980ee7e7ff</password>
            <description>jWebSocket Admin User</description>
            <status>1</status>
            <roles>
                <role>Administrator</role>
            </roles>
        </user>
        <user>
            <uuid>000-000-001-2011-07-14-11-32-40-223</uuid>
            <loginname>guest</loginname>
            <firstname>jWebSocket Guest User</firstname>
            <lastname>(Guest Role)</lastname>
			<!-- no password means that the user does not need a password -->
            <password>guest</password>
            <description>jWebSocket Guest User</description>
            <status>1</status>
            <roles>
				<!-- should be restricted in your application! open for demo purposes only! -->
                <role>Guest</role>
            </roles>
        </user>
        <user>
            <uuid>000-000-004-2011-07-14-11-35-54-871</uuid>
            <loginname>anonymous</loginname>
            <firstname>jWebSocket Anonymous User</firstname>
            <lastname>(Roles to be specified!)</lastname>
			<!-- empty password -->
            <password></password>
            <description>jWebSocket Anonymous User (Specify if anonymous logins should be supported at all in System Plug-in)</description>
			<!-- 0=blocked 1=allowed ... future states pending -->
            <status>1</status>
            <roles>

            </roles>
        </user>
    </users>

	<!-- plug-ins to be instantiated for jWebSocket -->
    <plugins>
		<!-- the system plug-in, do not remove, mandatory for basic WebsScket communication operations -->
        <plugin>
            <name>org.jwebsocket.plugins.system.SystemPlugIn</name>
            <ns>org.jwebsocket.plugins.system</ns>
            <id>jws.system</id>
            <jar>jWebSocketServer-1.0.jar</jar>
			<!-- plug-in specific settings -->
            <settings>
				<!-- specify whether open, close, login, logout events should
					 be broadcasted per default. To suppress these broadcasts
					 per events turn settings "on" here and optionally suppress
					 them per client command. -->
                <setting key="broadcastOpenEvent">true</setting>
                <setting key="broadcastCloseEvent">true</setting>
                <setting key="broadcastLoginEvent">true</setting>
                <setting key="broadcastLogoutEvent">true</setting>
                <setting key="allowAnonymousLogin">true</setting>
				<!-- this is the user name used for anonymous logins,
					all anonymous users that just connect will get this user
					name and all roles and rights assigned to this user.
					Hence, be careful with the roles and rights you assign to
					this user when you set allowAnonymousLogin to true -->
                <setting key="anonymousLoginName">anonymous</setting>
                <setting key="loginNameCaseInsensitive">true</setting>
				<!-- if this flag is set to true all unknown users automatically
					are anonymous users. This means they required the optional
					anonymous password and they get the roles and rights from
					the anonymous user. -->
                <setting key="allowAutoAnonymous">false</setting>
            </settings>
            <server-assignments>
                <server-assignment>ts0</server-assignment>
            </server-assignments>
        </plugin>

        <plugin>
            <name>org.jwebsocket.plugins.channels.ChannelPlugIn</name>
            <id>jws.channels</id>
            <ns>org.jwebsocket.plugins.channels</ns>
            <jar>jWebSocketChannelPlugIn-1.0.jar</jar>
            <server-assignments>
                <server-assignment>ts0</server-assignment>
            </server-assignments>
            <settings>
                <setting key="spring_config">${JWEBSOCKET_HOME}conf/ChannelPlugIn/channel.xml</setting>
				<!-- config has been moved to channel.xml spring config -->
            </settings>
        </plugin>

    </plugins>

</jWebSocket>
